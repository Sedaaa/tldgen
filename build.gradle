/**
	Half-proved gradle configuration.
	This should create the eclipse configuration just fine, but the following features are untested:

	* jar generation
	* upload to maven central
	* Zip distribution file

	icoloma:
	I am leaving the commented (original) versions for the moment where I save some time to give it a look

*/

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply from: 'https://raw.github.com/icoloma/gradle-plugins/master/providedCompile.gradle'
apply from: 'https://raw.github.com/icoloma/gradle-plugins/master/artifacts.gradle'

project.version='1.6-SNAPSHOT'
project.group='org.extrema-sistemas'

repositories {
	flatDir name: 'jdk-home', dirs: System.properties['java.home'] + "/../lib/"
}

repositories {
    mavenCentral()
}

configurations {
    all*.exclude module: 'commons-logging'
}

dependencies {

	providedCompile	":tools",
					"net.sourceforge.saxon:saxon:9.1.0.8",
					"ch.qos.logback:logback-classic:0.9.24",
					"javax.servlet.jsp:jsp-api:2.1",
					"org.slf4j:slf4j-api:1.6.1",
			 		"commons-io:commons-io:1.4",
					"commons-lang:commons-lang:2.4"

	testCompile 	"junit:junit:4.5"

}

artifacts {
    archives jar
}
signing {
    sign configurations.archives
}

uploadArchives {

    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
 
        pom.project {
            name project.name
            packaging 'jar'
            description 'TLD and HTML code generation from javadoc annotations.'
            url 'http://code.google.com/p/tldgen/'
            scm {
                url 'https://code.google.com/p/tldgen/'
                connection "scm:git:https://code.google.com/p/tldgen/"
                developerConnection "scm:git:https://code.google.com/p/tldgen/"
            }
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            developers {
               developer {
                   id 'icoloma'
                   name 'Nacho Coloma'
                   email 'icoloma@gmail.com'
               }
               developer {
                   id 'ccoloma'
                   name 'Carlos Coloma'
                   email 'ccescribano@gmail.com'
               }
               developer {
                   id 'beradrian'
                   name 'Adrian Ber'
                   email 'beradrian@gmail.com'
               }
               developer {
                   id 'nathamcomstock'
                   name 'Natham Comstock'
               }

           }
        }
        uniqueVersion = true // 'false' failing due to http://jira.codehaus.org/browse/GRADLE-629
        configuration = configurations.archives
        
        snapshotRepository(url: 'http://oss.sonatype.org/content/repositories/snapshots') {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
        }
        
        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
        }
    }
}

task 'zipDist'(type: Zip, dependsOn: javadoc) {
	into("$archivesBaseName-${version}") {
		from(libsDir)
		from(projectDir) {
			include 'README'
			include 'LICENSE'
		}
		from(configurations.runtime.resolve()) {
			into 'lib'
		} 
	}
}














/*

task jar(type: Jar, overwrite: true, dependsOn: compileJava, description: "Creates tldgen.jar") {
	from(sourceSets.main.classesDir) {
		include "org/tldgen/annotations/**"
	}
}

task toolsJar(type: Jar, dependsOn: compileJava, description: "Creates tldgen-tools.jar") {
	baseName = 'tldgen-tools';
	from sourceSets.main.classesDir
}

task zip(type: Zip, dependsOn: [jar, sourcesJar, javadocJar, toolsJar]) {
	prefix = "${project.name}-${project.version}/"
	into(prefix) {
		from(libsDir)
		from(projectDir) {
			include 'LICENSE' 
			include 'README'
		}
		from('src/main/scripts') {
			into 'bin'
			fileMode = 0755
		}
		from(docsDir) {
			into 'docs'
		}
		from(configurations.runtime.resolve() + configurations.providedCompile.resolve()) {
			into 'lib'
			exclude 'tools.jar'
		} 
	}
}
*/

